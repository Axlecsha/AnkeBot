from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

import app.TranslateFun.TranslateFun as TF
from app.Classactivity import *






router_launch = Router()
global lang 

@router_launch.message(CommandStart())
#async def cmd_start(message: Message):
#   await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}.\n–Ø –±–æ—Ç –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–º—è—Ç–∏\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π.', reply_markup = MainMenu())
async def cmd_start(message: Message, state: FSMContext):

    languages = [
        [KeyboardButton(text="English üá¨üáß")],
        [KeyboardButton(text="Russian üá∑üá∫")],
        [KeyboardButton(text="Japanese üáØüáµ")],
        [KeyboardButton(text="Chinese üá®üá≥")],
    ]
    languagekb = ReplyKeyboardMarkup(keyboard=languages, resize_keyboard=True,
                                           input_field_placeholder="Choose your language")
    
    await message.answer("Hello, setup my language!", reply_markup=languagekb)
    await state.set_state(StepsLaunch.CHOSENLANGUAGE)

@router_launch.message(StepsLaunch.CHOSENLANGUAGE)
async def choose_language(message: Message,state: FSMContext):
    if message.text == "English üá¨üáß":
        lang = "en"
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(lang=lang)
        buttons = [
            [KeyboardButton(text=await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—â—å",lang))],
            [KeyboardButton(text=await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang))],
        ]
        
        buttonskb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,
                                                input_field_placeholder=await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang))
        await message.answer(await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang), reply_markup=buttonskb)
        await state.set_state(StepsLaunch.CHOSENACTIVITY)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—Ç—Ä–∏–±—É—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ –æ–±—ä–µ–∫—Ç
    elif message.text in "Russian üá∑üá∫":
        lang = 'ru'
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(lang=lang)
        buttons = [
            [KeyboardButton(text=await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—â—å",lang))],
            [KeyboardButton(text=await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang))],
        ]

        buttonskb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,
                                                input_field_placeholder=await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang))
        await message.answer(await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang), reply_markup=buttonskb)
        await state.set_state(StepsLaunch.CHOSENACTIVITY)
        # —Ä—É—Å—Å–∫–∏–π
    elif message.text in "Japanese üáØüáµ":
        lang = 'ja'
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(lang=lang)
        buttons = [
            [KeyboardButton(text=await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—â—å",lang))],
            [KeyboardButton(text=await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang))],
        ]

        buttonskb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,
                                                input_field_placeholder=await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang))
        await message.answer(await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang), reply_markup=buttonskb)
        await state.set_state(StepsLaunch.CHOSENACTIVITY)
        # –∞–Ω–∏–º–µ—à–Ω—ã–π
    elif message.text in "Chinese üá®üá≥":
        lang = 'zh-cn'
        await message.answer(await TF.Translation("–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —è–∑—ã–∫!",lang),reply_markup=ReplyKeyboardRemove())
        await state.update_data(lang=lang)
        buttons = [
            [KeyboardButton(text=await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang))],
            [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—â—å",lang))],
            [KeyboardButton(text=await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang))],
        ]

        buttonskb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,
                                                input_field_placeholder=await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang))
        await message.answer(await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang), reply_markup=buttonskb)
        await state.set_state(StepsLaunch.CHOSENACTIVITY)
        # –∫–∏—Ç–∞–π—Å–∫–∏–π

@router_launch.message(StepsLaunch.CHOSENACTIVITY)
async def choose_Activity(message: Message,state: FSMContext):
    data = await state.get_data()
    lang = await data.get('Lang', 'en')

    buttons = [
        [KeyboardButton(text=await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang))],
        [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang))],
        [KeyboardButton(text=await TF.Translation("–ü–æ–º–æ—â—å",lang))],
        [KeyboardButton(text=await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang))],
    ]

    buttonskb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,
                                            input_field_placeholder=await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang))
    await message.answer(await TF.Translation("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",lang), reply_markup=buttonskb)


    if message.text in await TF.Translation("–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",lang):
        pass

    elif message.text in await TF.Translation("–ü–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",lang):
        pass

    elif message.text in await TF.Translation("–ü–æ–º–æ—â—å",lang):
        pass

    elif message.text in await TF.Translation("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",lang):
        pass
